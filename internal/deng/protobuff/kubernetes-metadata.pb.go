// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.17.3
// source: kubernetes-metadata.proto

package protobuff

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AtomicStatus int32

const (
	AtomicStatus_NotStarted AtomicStatus = 0
	AtomicStatus_Initiated  AtomicStatus = 1
	AtomicStatus_Ready      AtomicStatus = 2
	AtomicStatus_Paused     AtomicStatus = 3
	AtomicStatus_Rolling    AtomicStatus = 4
	AtomicStatus_Success    AtomicStatus = 5
	AtomicStatus_Failure    AtomicStatus = 6
	AtomicStatus_Aborted    AtomicStatus = 7
)

// Enum value maps for AtomicStatus.
var (
	AtomicStatus_name = map[int32]string{
		0: "NotStarted",
		1: "Initiated",
		2: "Ready",
		3: "Paused",
		4: "Rolling",
		5: "Success",
		6: "Failure",
		7: "Aborted",
	}
	AtomicStatus_value = map[string]int32{
		"NotStarted": 0,
		"Initiated":  1,
		"Ready":      2,
		"Paused":     3,
		"Rolling":    4,
		"Success":    5,
		"Failure":    6,
		"Aborted":    7,
	}
)

func (x AtomicStatus) Enum() *AtomicStatus {
	p := new(AtomicStatus)
	*p = x
	return p
}

func (x AtomicStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AtomicStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kubernetes_metadata_proto_enumTypes[0].Descriptor()
}

func (AtomicStatus) Type() protoreflect.EnumType {
	return &file_kubernetes_metadata_proto_enumTypes[0]
}

func (x AtomicStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AtomicStatus.Descriptor instead.
func (AtomicStatus) EnumDescriptor() ([]byte, []int) {
	return file_kubernetes_metadata_proto_rawDescGZIP(), []int{0}
}

type KubernetesDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Atomic []*AtomicDeployment `protobuf:"bytes,1,rep,name=atomic,proto3" json:"atomic,omitempty"`
}

func (x *KubernetesDeployment) Reset() {
	*x = KubernetesDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubernetes_metadata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesDeployment) ProtoMessage() {}

func (x *KubernetesDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_metadata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesDeployment.ProtoReflect.Descriptor instead.
func (*KubernetesDeployment) Descriptor() ([]byte, []int) {
	return file_kubernetes_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *KubernetesDeployment) GetAtomic() []*AtomicDeployment {
	if x != nil {
		return x.Atomic
	}
	return nil
}

type AtomicDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type         string           `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ResolvedName string           `protobuf:"bytes,3,opt,name=resolvedName,proto3" json:"resolvedName,omitempty"`
	Status       AtomicStatus     `protobuf:"varint,4,opt,name=status,proto3,enum=kubernetes.AtomicStatus" json:"status,omitempty"`
	State        *KubernetesState `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *AtomicDeployment) Reset() {
	*x = AtomicDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubernetes_metadata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtomicDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtomicDeployment) ProtoMessage() {}

func (x *AtomicDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_metadata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtomicDeployment.ProtoReflect.Descriptor instead.
func (*AtomicDeployment) Descriptor() ([]byte, []int) {
	return file_kubernetes_metadata_proto_rawDescGZIP(), []int{1}
}

func (x *AtomicDeployment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AtomicDeployment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AtomicDeployment) GetResolvedName() string {
	if x != nil {
		return x.ResolvedName
	}
	return ""
}

func (x *AtomicDeployment) GetStatus() AtomicStatus {
	if x != nil {
		return x.Status
	}
	return AtomicStatus_NotStarted
}

func (x *AtomicDeployment) GetState() *KubernetesState {
	if x != nil {
		return x.State
	}
	return nil
}

type KubernetesState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PauseConditions []*PauseCondition `protobuf:"bytes,1,rep,name=pauseConditions,proto3" json:"pauseConditions,omitempty"`
	// CurrentPodHash the hash of the current pod template
	CurrentPodHash string `protobuf:"bytes,2,opt,name=currentPodHash,proto3" json:"currentPodHash,omitempty"`
	// Total number of non-terminated pods targeted by this rollout (their labels match the selector).
	Replicas int32 `protobuf:"varint,3,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// Total number of non-terminated pods targeted by this rollout that have the desired template spec.
	UpdatedReplicas int32 `protobuf:"varint,4,opt,name=updatedReplicas,proto3" json:"updatedReplicas,omitempty"`
	// Total number of ready pods targeted by this rollout.
	ReadyReplicas int32 `protobuf:"varint,5,opt,name=readyReplicas,proto3" json:"readyReplicas,omitempty"`
	// Total number of available pods (ready for at least minReadySeconds) targeted by this rollout.
	AvailableReplicas int32 `protobuf:"varint,6,opt,name=availableReplicas,proto3" json:"availableReplicas,omitempty"`
	// CurrentStepIndex defines the current step of the rollout is on. If the current step index is null, the
	// controller will execute the rollout.
	CurrentStepIndex *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=currentStepIndex,proto3" json:"currentStepIndex,omitempty"`
	// Conditions a list of conditions a rollout can have.
	Conditions []*RolloutCondition `protobuf:"bytes,8,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// Canary describes the state of the canary rollout
	Canary *CanaryStatus `protobuf:"bytes,9,opt,name=canary,proto3" json:"canary,omitempty"`
	// BlueGreen describes the state of the bluegreen rollout
	// +optional
	BlueGreen *BlueGreenStatus `protobuf:"bytes,10,opt,name=blueGreen,proto3" json:"blueGreen,omitempty"`
	// HPAReplicas the number of non-terminated replicas that are receiving active traffic
	HPAReplicas int32 `protobuf:"varint,11,opt,name=HPAReplicas,proto3" json:"HPAReplicas,omitempty"`
	// Selector that identifies the pods that are receiving active traffic
	Selector string `protobuf:"bytes,12,opt,name=selector,proto3" json:"selector,omitempty"`
	// StableRS indicates the replicaset that has successfully rolled out
	StableRS string `protobuf:"bytes,13,opt,name=stableRS,proto3" json:"stableRS,omitempty"`
	// RestartedAt indicates last time a Rollout was restarted
	RestartedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=restartedAt,proto3" json:"restartedAt,omitempty"`
	// PromoteFull indicates if the rollout should perform a full promotion, skipping analysis and pauses.
	PromoteFull bool `protobuf:"varint,15,opt,name=promoteFull,proto3" json:"promoteFull,omitempty"`
}

func (x *KubernetesState) Reset() {
	*x = KubernetesState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubernetes_metadata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesState) ProtoMessage() {}

func (x *KubernetesState) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_metadata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesState.ProtoReflect.Descriptor instead.
func (*KubernetesState) Descriptor() ([]byte, []int) {
	return file_kubernetes_metadata_proto_rawDescGZIP(), []int{2}
}

func (x *KubernetesState) GetPauseConditions() []*PauseCondition {
	if x != nil {
		return x.PauseConditions
	}
	return nil
}

func (x *KubernetesState) GetCurrentPodHash() string {
	if x != nil {
		return x.CurrentPodHash
	}
	return ""
}

func (x *KubernetesState) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *KubernetesState) GetUpdatedReplicas() int32 {
	if x != nil {
		return x.UpdatedReplicas
	}
	return 0
}

func (x *KubernetesState) GetReadyReplicas() int32 {
	if x != nil {
		return x.ReadyReplicas
	}
	return 0
}

func (x *KubernetesState) GetAvailableReplicas() int32 {
	if x != nil {
		return x.AvailableReplicas
	}
	return 0
}

func (x *KubernetesState) GetCurrentStepIndex() *wrapperspb.Int32Value {
	if x != nil {
		return x.CurrentStepIndex
	}
	return nil
}

func (x *KubernetesState) GetConditions() []*RolloutCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *KubernetesState) GetCanary() *CanaryStatus {
	if x != nil {
		return x.Canary
	}
	return nil
}

func (x *KubernetesState) GetBlueGreen() *BlueGreenStatus {
	if x != nil {
		return x.BlueGreen
	}
	return nil
}

func (x *KubernetesState) GetHPAReplicas() int32 {
	if x != nil {
		return x.HPAReplicas
	}
	return 0
}

func (x *KubernetesState) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *KubernetesState) GetStableRS() string {
	if x != nil {
		return x.StableRS
	}
	return ""
}

func (x *KubernetesState) GetRestartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RestartedAt
	}
	return nil
}

func (x *KubernetesState) GetPromoteFull() bool {
	if x != nil {
		return x.PromoteFull
	}
	return false
}

type PauseCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason    string                 `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *PauseCondition) Reset() {
	*x = PauseCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubernetes_metadata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseCondition) ProtoMessage() {}

func (x *PauseCondition) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_metadata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseCondition.ProtoReflect.Descriptor instead.
func (*PauseCondition) Descriptor() ([]byte, []int) {
	return file_kubernetes_metadata_proto_rawDescGZIP(), []int{3}
}

func (x *PauseCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PauseCondition) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type RolloutCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of deployment condition.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Phase of the condition, one of True, False, Unknown.
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// The last time this condition was updated.
	LastUpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=lastUpdateTime,proto3" json:"lastUpdateTime,omitempty"`
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=lastTransitionTime,proto3" json:"lastTransitionTime,omitempty"`
	// The reason for the condition's last transition.
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	// A human readable message indicating details about the transition.
	Message string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RolloutCondition) Reset() {
	*x = RolloutCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubernetes_metadata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolloutCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolloutCondition) ProtoMessage() {}

func (x *RolloutCondition) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_metadata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolloutCondition.ProtoReflect.Descriptor instead.
func (*RolloutCondition) Descriptor() ([]byte, []int) {
	return file_kubernetes_metadata_proto_rawDescGZIP(), []int{4}
}

func (x *RolloutCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RolloutCondition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RolloutCondition) GetLastUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

func (x *RolloutCondition) GetLastTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

func (x *RolloutCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RolloutCondition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CanaryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CurrentStepAnalysisRunStatus indicates the status of the current step analysis run
	CurrentStepAnalysisRunStatus *RolloutAnalysisRunStatus `protobuf:"bytes,1,opt,name=currentStepAnalysisRunStatus,proto3" json:"currentStepAnalysisRunStatus,omitempty"`
	// CurrentBackgroundAnalysisRunStatus indicates the status of the current background analysis run
	CurrentBackgroundAnalysisRunStatus *RolloutAnalysisRunStatus `protobuf:"bytes,2,opt,name=currentBackgroundAnalysisRunStatus,proto3" json:"currentBackgroundAnalysisRunStatus,omitempty"`
	// CurrentExperiment indicates the running experiment
	CurrentExperiment string `protobuf:"bytes,3,opt,name=currentExperiment,proto3" json:"currentExperiment,omitempty"`
}

func (x *CanaryStatus) Reset() {
	*x = CanaryStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubernetes_metadata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanaryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanaryStatus) ProtoMessage() {}

func (x *CanaryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_metadata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanaryStatus.ProtoReflect.Descriptor instead.
func (*CanaryStatus) Descriptor() ([]byte, []int) {
	return file_kubernetes_metadata_proto_rawDescGZIP(), []int{5}
}

func (x *CanaryStatus) GetCurrentStepAnalysisRunStatus() *RolloutAnalysisRunStatus {
	if x != nil {
		return x.CurrentStepAnalysisRunStatus
	}
	return nil
}

func (x *CanaryStatus) GetCurrentBackgroundAnalysisRunStatus() *RolloutAnalysisRunStatus {
	if x != nil {
		return x.CurrentBackgroundAnalysisRunStatus
	}
	return nil
}

func (x *CanaryStatus) GetCurrentExperiment() string {
	if x != nil {
		return x.CurrentExperiment
	}
	return ""
}

type BlueGreenStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PreviewSelector indicates which replicas set the preview service is serving traffic to
	PreviewSelector string `protobuf:"bytes,1,opt,name=previewSelector,proto3" json:"previewSelector,omitempty"`
	// ActiveSelector indicates which replicas set the active service is serving traffic to
	ActiveSelector string `protobuf:"bytes,2,opt,name=activeSelector,proto3" json:"activeSelector,omitempty"`
	// ScaleUpPreviewCheckPoint indicates that the Replicaset receiving traffic from the preview service is ready to be scaled up after the rollout is unpaused
	ScaleUpPreviewCheckPoint bool `protobuf:"varint,3,opt,name=scaleUpPreviewCheckPoint,proto3" json:"scaleUpPreviewCheckPoint,omitempty"`
	// PrePromotionAnalysisRunStatus indicates the status of the current prepromotion analysis run
	PrePromotionAnalysisRunStatus *RolloutAnalysisRunStatus `protobuf:"bytes,4,opt,name=prePromotionAnalysisRunStatus,proto3" json:"prePromotionAnalysisRunStatus,omitempty"`
	// PostPromotionAnalysisRunStatus indicates the status of the current post promotion analysis run
	PostPromotionAnalysisRunStatus *RolloutAnalysisRunStatus `protobuf:"bytes,5,opt,name=postPromotionAnalysisRunStatus,proto3" json:"postPromotionAnalysisRunStatus,omitempty"`
}

func (x *BlueGreenStatus) Reset() {
	*x = BlueGreenStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubernetes_metadata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlueGreenStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlueGreenStatus) ProtoMessage() {}

func (x *BlueGreenStatus) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_metadata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlueGreenStatus.ProtoReflect.Descriptor instead.
func (*BlueGreenStatus) Descriptor() ([]byte, []int) {
	return file_kubernetes_metadata_proto_rawDescGZIP(), []int{6}
}

func (x *BlueGreenStatus) GetPreviewSelector() string {
	if x != nil {
		return x.PreviewSelector
	}
	return ""
}

func (x *BlueGreenStatus) GetActiveSelector() string {
	if x != nil {
		return x.ActiveSelector
	}
	return ""
}

func (x *BlueGreenStatus) GetScaleUpPreviewCheckPoint() bool {
	if x != nil {
		return x.ScaleUpPreviewCheckPoint
	}
	return false
}

func (x *BlueGreenStatus) GetPrePromotionAnalysisRunStatus() *RolloutAnalysisRunStatus {
	if x != nil {
		return x.PrePromotionAnalysisRunStatus
	}
	return nil
}

func (x *BlueGreenStatus) GetPostPromotionAnalysisRunStatus() *RolloutAnalysisRunStatus {
	if x != nil {
		return x.PostPromotionAnalysisRunStatus
	}
	return nil
}

type RolloutAnalysisRunStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status  string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RolloutAnalysisRunStatus) Reset() {
	*x = RolloutAnalysisRunStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubernetes_metadata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolloutAnalysisRunStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolloutAnalysisRunStatus) ProtoMessage() {}

func (x *RolloutAnalysisRunStatus) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_metadata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolloutAnalysisRunStatus.ProtoReflect.Descriptor instead.
func (*RolloutAnalysisRunStatus) Descriptor() ([]byte, []int) {
	return file_kubernetes_metadata_proto_rawDescGZIP(), []int{7}
}

func (x *RolloutAnalysisRunStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RolloutAnalysisRunStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RolloutAnalysisRunStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_kubernetes_metadata_proto protoreflect.FileDescriptor

var file_kubernetes_metadata_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2d, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x06, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x41, 0x74,
	0x6f, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x22, 0xc3, 0x01, 0x0a, 0x10, 0x41, 0x74, 0x6f, 0x6d, 0x69,
	0x63, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xc7, 0x05, 0x0a,
	0x0f, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x44, 0x0a, 0x0f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x6f, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x30, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x6e,
	0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x39, 0x0a, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x48, 0x50, 0x41, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x48, 0x50, 0x41, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x53, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x53, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x46,
	0x75, 0x6c, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x22, 0x62, 0x0a, 0x0e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x10, 0x52,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x4a, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9c, 0x02,
	0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x68,
	0x0a, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52,
	0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x74, 0x0a, 0x22, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x22, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xf9, 0x02, 0x0a,
	0x0f, 0x42, 0x6c, 0x75, 0x65, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x6a,
	0x0a, 0x1d, 0x70, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1d, 0x70, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6c, 0x0a, 0x1e, 0x70, 0x6f,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52,
	0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1e, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52,
	0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x60, 0x0a, 0x18, 0x52, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x78, 0x0a, 0x0c, 0x41, 0x74,
	0x6f, 0x6d, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x10, 0x07, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x79, 0x2d, 0x69, 0x6f, 0x2f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x64, 0x65, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kubernetes_metadata_proto_rawDescOnce sync.Once
	file_kubernetes_metadata_proto_rawDescData = file_kubernetes_metadata_proto_rawDesc
)

func file_kubernetes_metadata_proto_rawDescGZIP() []byte {
	file_kubernetes_metadata_proto_rawDescOnce.Do(func() {
		file_kubernetes_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(file_kubernetes_metadata_proto_rawDescData)
	})
	return file_kubernetes_metadata_proto_rawDescData
}

var file_kubernetes_metadata_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kubernetes_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_kubernetes_metadata_proto_goTypes = []interface{}{
	(AtomicStatus)(0),                // 0: kubernetes.AtomicStatus
	(*KubernetesDeployment)(nil),     // 1: kubernetes.KubernetesDeployment
	(*AtomicDeployment)(nil),         // 2: kubernetes.AtomicDeployment
	(*KubernetesState)(nil),          // 3: kubernetes.KubernetesState
	(*PauseCondition)(nil),           // 4: kubernetes.PauseCondition
	(*RolloutCondition)(nil),         // 5: kubernetes.RolloutCondition
	(*CanaryStatus)(nil),             // 6: kubernetes.CanaryStatus
	(*BlueGreenStatus)(nil),          // 7: kubernetes.BlueGreenStatus
	(*RolloutAnalysisRunStatus)(nil), // 8: kubernetes.RolloutAnalysisRunStatus
	(*wrapperspb.Int32Value)(nil),    // 9: google.protobuf.Int32Value
	(*timestamppb.Timestamp)(nil),    // 10: google.protobuf.Timestamp
}
var file_kubernetes_metadata_proto_depIdxs = []int32{
	2,  // 0: kubernetes.KubernetesDeployment.atomic:type_name -> kubernetes.AtomicDeployment
	0,  // 1: kubernetes.AtomicDeployment.status:type_name -> kubernetes.AtomicStatus
	3,  // 2: kubernetes.AtomicDeployment.state:type_name -> kubernetes.KubernetesState
	4,  // 3: kubernetes.KubernetesState.pauseConditions:type_name -> kubernetes.PauseCondition
	9,  // 4: kubernetes.KubernetesState.currentStepIndex:type_name -> google.protobuf.Int32Value
	5,  // 5: kubernetes.KubernetesState.conditions:type_name -> kubernetes.RolloutCondition
	6,  // 6: kubernetes.KubernetesState.canary:type_name -> kubernetes.CanaryStatus
	7,  // 7: kubernetes.KubernetesState.blueGreen:type_name -> kubernetes.BlueGreenStatus
	10, // 8: kubernetes.KubernetesState.restartedAt:type_name -> google.protobuf.Timestamp
	10, // 9: kubernetes.PauseCondition.startTime:type_name -> google.protobuf.Timestamp
	10, // 10: kubernetes.RolloutCondition.lastUpdateTime:type_name -> google.protobuf.Timestamp
	10, // 11: kubernetes.RolloutCondition.lastTransitionTime:type_name -> google.protobuf.Timestamp
	8,  // 12: kubernetes.CanaryStatus.currentStepAnalysisRunStatus:type_name -> kubernetes.RolloutAnalysisRunStatus
	8,  // 13: kubernetes.CanaryStatus.currentBackgroundAnalysisRunStatus:type_name -> kubernetes.RolloutAnalysisRunStatus
	8,  // 14: kubernetes.BlueGreenStatus.prePromotionAnalysisRunStatus:type_name -> kubernetes.RolloutAnalysisRunStatus
	8,  // 15: kubernetes.BlueGreenStatus.postPromotionAnalysisRunStatus:type_name -> kubernetes.RolloutAnalysisRunStatus
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_kubernetes_metadata_proto_init() }
func file_kubernetes_metadata_proto_init() {
	if File_kubernetes_metadata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kubernetes_metadata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubernetes_metadata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtomicDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubernetes_metadata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubernetes_metadata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubernetes_metadata_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolloutCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubernetes_metadata_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanaryStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubernetes_metadata_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlueGreenStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubernetes_metadata_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolloutAnalysisRunStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kubernetes_metadata_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kubernetes_metadata_proto_goTypes,
		DependencyIndexes: file_kubernetes_metadata_proto_depIdxs,
		EnumInfos:         file_kubernetes_metadata_proto_enumTypes,
		MessageInfos:      file_kubernetes_metadata_proto_msgTypes,
	}.Build()
	File_kubernetes_metadata_proto = out.File
	file_kubernetes_metadata_proto_rawDesc = nil
	file_kubernetes_metadata_proto_goTypes = nil
	file_kubernetes_metadata_proto_depIdxs = nil
}
