// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DeploymentServiceClient is the client API for DeploymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentServiceClient interface {
	// Start a deployment
	Start(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Descriptor, error)
	// Get deployment status
	Status(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*Descriptor, error)
	// Watch deployment events
	// Commented out for now - clients will need to poll
	//    rpc WatchEvents(status.GetEventRequest) returns (stream event.Event) {
	//        option (google.api.http) = {
	//            get: "/v1/deployments/{deploymentId}/events/watch"
	//        };
	//    }
	// Get deployment recent events
	GetEvents(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*EventListResponse, error)
	// Resume a paused deployment
	Resume(ctx context.Context, in *RolloutRequest, opts ...grpc.CallOption) (*RolloutResponse, error)
	// Abort a deployment
	Abort(ctx context.Context, in *RolloutRequest, opts ...grpc.CallOption) (*RolloutResponse, error)
	// Restart a deployment
	Restart(ctx context.Context, in *RolloutRequest, opts ...grpc.CallOption) (*RolloutResponse, error)
	// Get applications
	GetApplications(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error)
	// Get deployments for the specified application(s)
	GetApplicationDeployments(ctx context.Context, in *GetAppDeployment, opts ...grpc.CallOption) (*GetAppDeployResponse, error)
	// Get accounts available
	GetAccounts(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
}

type deploymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentServiceClient(cc grpc.ClientConnInterface) DeploymentServiceClient {
	return &deploymentServiceClient{cc}
}

func (c *deploymentServiceClient) Start(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Descriptor, error) {
	out := new(Descriptor)
	err := c.cc.Invoke(ctx, "/deployment.DeploymentService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) Status(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*Descriptor, error) {
	out := new(Descriptor)
	err := c.cc.Invoke(ctx, "/deployment.DeploymentService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) GetEvents(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*EventListResponse, error) {
	out := new(EventListResponse)
	err := c.cc.Invoke(ctx, "/deployment.DeploymentService/GetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) Resume(ctx context.Context, in *RolloutRequest, opts ...grpc.CallOption) (*RolloutResponse, error) {
	out := new(RolloutResponse)
	err := c.cc.Invoke(ctx, "/deployment.DeploymentService/Resume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) Abort(ctx context.Context, in *RolloutRequest, opts ...grpc.CallOption) (*RolloutResponse, error) {
	out := new(RolloutResponse)
	err := c.cc.Invoke(ctx, "/deployment.DeploymentService/Abort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) Restart(ctx context.Context, in *RolloutRequest, opts ...grpc.CallOption) (*RolloutResponse, error) {
	out := new(RolloutResponse)
	err := c.cc.Invoke(ctx, "/deployment.DeploymentService/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) GetApplications(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error) {
	out := new(GetAppResponse)
	err := c.cc.Invoke(ctx, "/deployment.DeploymentService/GetApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) GetApplicationDeployments(ctx context.Context, in *GetAppDeployment, opts ...grpc.CallOption) (*GetAppDeployResponse, error) {
	out := new(GetAppDeployResponse)
	err := c.cc.Invoke(ctx, "/deployment.DeploymentService/GetApplicationDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) GetAccounts(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, "/deployment.DeploymentService/GetAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentServiceServer is the server API for DeploymentService service.
// All implementations must embed UnimplementedDeploymentServiceServer
// for forward compatibility
type DeploymentServiceServer interface {
	// Start a deployment
	Start(context.Context, *Deployment) (*Descriptor, error)
	// Get deployment status
	Status(context.Context, *GetStatusRequest) (*Descriptor, error)
	// Watch deployment events
	// Commented out for now - clients will need to poll
	//    rpc WatchEvents(status.GetEventRequest) returns (stream event.Event) {
	//        option (google.api.http) = {
	//            get: "/v1/deployments/{deploymentId}/events/watch"
	//        };
	//    }
	// Get deployment recent events
	GetEvents(context.Context, *GetEventRequest) (*EventListResponse, error)
	// Resume a paused deployment
	Resume(context.Context, *RolloutRequest) (*RolloutResponse, error)
	// Abort a deployment
	Abort(context.Context, *RolloutRequest) (*RolloutResponse, error)
	// Restart a deployment
	Restart(context.Context, *RolloutRequest) (*RolloutResponse, error)
	// Get applications
	GetApplications(context.Context, *GetAppRequest) (*GetAppResponse, error)
	// Get deployments for the specified application(s)
	GetApplicationDeployments(context.Context, *GetAppDeployment) (*GetAppDeployResponse, error)
	// Get accounts available
	GetAccounts(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	mustEmbedUnimplementedDeploymentServiceServer()
}

// UnimplementedDeploymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeploymentServiceServer struct {
}

func (UnimplementedDeploymentServiceServer) Start(context.Context, *Deployment) (*Descriptor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedDeploymentServiceServer) Status(context.Context, *GetStatusRequest) (*Descriptor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedDeploymentServiceServer) GetEvents(context.Context, *GetEventRequest) (*EventListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedDeploymentServiceServer) Resume(context.Context, *RolloutRequest) (*RolloutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resume not implemented")
}
func (UnimplementedDeploymentServiceServer) Abort(context.Context, *RolloutRequest) (*RolloutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedDeploymentServiceServer) Restart(context.Context, *RolloutRequest) (*RolloutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedDeploymentServiceServer) GetApplications(context.Context, *GetAppRequest) (*GetAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplications not implemented")
}
func (UnimplementedDeploymentServiceServer) GetApplicationDeployments(context.Context, *GetAppDeployment) (*GetAppDeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationDeployments not implemented")
}
func (UnimplementedDeploymentServiceServer) GetAccounts(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedDeploymentServiceServer) mustEmbedUnimplementedDeploymentServiceServer() {}

// UnsafeDeploymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentServiceServer will
// result in compilation errors.
type UnsafeDeploymentServiceServer interface {
	mustEmbedUnimplementedDeploymentServiceServer()
}

func RegisterDeploymentServiceServer(s *grpc.Server, srv DeploymentServiceServer) {
	s.RegisterService(&_DeploymentService_serviceDesc, srv)
}

func _DeploymentService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployment.DeploymentService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).Start(ctx, req.(*Deployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployment.DeploymentService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).Status(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployment.DeploymentService/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).GetEvents(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployment.DeploymentService/Resume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).Resume(ctx, req.(*RolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployment.DeploymentService/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).Abort(ctx, req.(*RolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployment.DeploymentService/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).Restart(ctx, req.(*RolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_GetApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).GetApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployment.DeploymentService/GetApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).GetApplications(ctx, req.(*GetAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_GetApplicationDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).GetApplicationDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployment.DeploymentService/GetApplicationDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).GetApplicationDeployments(ctx, req.(*GetAppDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployment.DeploymentService/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).GetAccounts(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeploymentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deployment.DeploymentService",
	HandlerType: (*DeploymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _DeploymentService_Start_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _DeploymentService_Status_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _DeploymentService_GetEvents_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _DeploymentService_Resume_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _DeploymentService_Abort_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _DeploymentService_Restart_Handler,
		},
		{
			MethodName: "GetApplications",
			Handler:    _DeploymentService_GetApplications_Handler,
		},
		{
			MethodName: "GetApplicationDeployments",
			Handler:    _DeploymentService_GetApplicationDeployments_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _DeploymentService_GetAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deployment.proto",
}
