#################
##
## AUTOGENERATED makefile.
##
#################

APP_NAME              = armory
APP_EXT               ?= "${CLI_EXT}"
VERSION               ?= $(shell ./scripts/version.sh)
REGISTRY              ?="armory-docker-local.jfrog.io"
REGISTRY_ORG          ?="armory"
GOARCH                ?= $(shell go env GOARCH)
GOOS                  ?= $(shell go env GOOS)
PWD                   =  $(shell pwd)
IMAGE_TAG             ?= $(VERSION)
LOCAL_KUBECTL_CONTEXT ?= "kind-armory-cloud-dev"
IMAGE                 := $(subst $\",,$(REGISTRY)/$(REGISTRY_ORG)/${APP_NAME}:${VERSION})
BUILD_DIR             := ${PWD}/build
DIST_DIR              := ${BUILD_DIR}/bin/$(GOOS)_$(GOARCH)
GEN_DIR               := ${PWD}/generated

#####################
## Build steps
#####################
.PHONY: all
all: clean build-dirs run-before-tools build check run-after-tools

# clean all work directories
.PHONY: clean
clean:
	@rm -fr $(BUILD_DIR)
	@rm -fr $(GEN_DIR)

.PHONY: build-dirs
build-dirs:
	@mkdir -p $(BUILD_DIR) $(DIST_DIR) "$(BUILD_DIR)/reports" $(GEN_DIR)

.PHONY: build
build: build-dirs
	@echo "Building ${DIST_DIR}/${APP_NAME}${APP_EXT} [main.version: ${VERSION}]..."
	@go build -ldflags "-X main.version=${VERSION}" -o ${DIST_DIR}/${APP_NAME}${APP_EXT} main.go



#####################
## Local Development
#####################
.PHONY: debug
debug: SHELL:=/usr/bin/env bash
debug: export ADDITIONAL_ACTIVE_PROFILES="local-overrides"
debug: export APPLICATION_NAME=${APP_NAME}
debug: export APPLICATION_VERSION=${VERSION}
debug: build-dirs run-before-tools
	@echo "Building ${DIST_DIR}/${APP_NAME}..."
	@go build -ldflags "-X main.version=${VERSION}" -o ${DIST_DIR}/${APP_NAME}-debug -gcflags "all=-N -l" main.go
	if [[ -f "${HOME}/.armory/${APP_NAME}.env" ]] ; then echo "sourcing ~/.armory/${APP_NAME}.env"; source "${HOME}/.armory/${APP_NAME}.env" ; fi
	dlv --listen=:2345 --headless=true --api-version=2 --accept-multiclient exec ${DIST_DIR}/${APP_NAME}-debug

.PHONY: run
run: SHELL:=/usr/bin/env bash
run: export ADDITIONAL_ACTIVE_PROFILES="local-overrides"
run: export APPLICATION_NAME=${APP_NAME}
run: export APPLICATION_VERSION=${VERSION}
run: build-dirs run-before-tools
	@echo "Building ${DIST_DIR}/${APP_NAME}..."
	@go build -ldflags "-X main.version=${VERSION}" -o ${DIST_DIR}/${APP_NAME} main.go
	if [[ -f "${HOME}/.armory/${APP_NAME}.env" ]] ; then echo "sourcing ~/.armory/${APP_NAME}.env"; source "${HOME}/.armory/${APP_NAME}.env" ; fi
	${DIST_DIR}/${APP_NAME}
	@mkdir -p $(GEN_DIR)


#####################
## Run tests and generate coverage report
#####################
.PHONY: check
check: export APP_NAME:=$(APP_NAME)
check: export BUILD_DIR:=$(BUILD_DIR)
check: build-dirs 
	@go run scripts/check.go

#####################
## install all tools step
#####################
.PHONY: install-tools
install-tools:
	@test ! -f "$(GEN_DIR)/.tools" && \
	echo installing tools.... && \
	go install github.com/vakenbolt/go-test-report@v0.9.3 && \
	go install github.com/undoio/delve/cmd/dlv@latest && \
	echo installing static check... && \
	go install honnef.co/go/tools/cmd/staticcheck@latest && \
	mkdir -p $(GEN_DIR) && touch $(GEN_DIR)/.tools || echo tools are installed


#####################
## Local static-check
#####################
.PHONY: static-check
static-check: install-tools
	@echo "Running static check in ${PWD}..."
	@staticcheck ./...


.PHONY: run-before-tools
run-before-tools: configureGoEnvironment
run-before-tools: install-tools  
	@go mod tidy
	@echo run before tools DONE

.PHONY: run-after-tools
run-after-tools: static-check
	@echo run after tools DONE

#####################
## Custom build steps
#####################
.PHONY: configureGoEnvironment
configureGoEnvironment: 
	@go env -w CGO_ENABLED=0
.PHONY: integration
integration: build-dirs install-tools
	@go test -v -cover ./integration/... -json > ${BUILD_DIR}/reports/integration-test-report.json
	@go test -v -coverprofile=${BUILD_DIR}/reports/integration.cov ./integration/...
	@cat ${BUILD_DIR}/reports/integration-test-report.json | go-test-report --title ${APP_NAME}-integration-test -v --output ${BUILD_DIR}/reports/integration_test_report.html

###################
## Trigger project bootstrap with latest version
###################
.PHONY: bootstrap-project
bootstrap-project: clean project.yaml
	@echo setting up project...
	@docker pull armory-docker-local.jfrog.io/armory/go-makefile:latest
	@docker run -v "${PWD}":/root/templates/data armory-docker-local.jfrog.io/armory/go-makefile:latest

