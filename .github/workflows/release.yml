on:
  push:
    branches:
      - main

name: Build and Release
jobs:
  setup:
    env:
      BASE_PROJECT: armory-cli
      GRGIT_USER: GitHub
      GRGIT_PASS: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.push_tag.outputs.new_tag }}
      changelog: ${{ steps.changelog.outputs.CHANGELOG }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Fetch full history
        run: git fetch --prune --tags --unshallow

      - name: Create Tag
        id: push_tag
        uses: mathieudutour/github-tag-action@v5.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch
          release_branches: main
          create_annotated_tag: false
          append_to_pre_release_tag: rc

      - name: Fetch Refresh
        run: git fetch --prune --tags

      - name: Generate Changelog
        id: changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export NEW_TAG="${{ steps.push_tag.outputs.new_tag }}"
          echo "NEW_TAG=$NEW_TAG"

          export PREVIOUS_TAG="${{ steps.push_tag.outputs.previous_tag }}"
          echo "PREVIOUS_TAG=$PREVIOUS_TAG"

          export CHANGELOG=`git log $NEW_TAG...$PREVIOUS_TAG --oneline`
          echo "CHANGELOG=$CHANGELOG"

          #Format the changelog so it's markdown compatible
          CHANGELOG="${CHANGELOG//$'%'/%25}"
          CHANGELOG="${CHANGELOG//$'\n'/%0A}"
          CHANGELOG="${CHANGELOG//$'\r'/%0D}"
          echo ::set-output name=CHANGELOG::$(echo -e "${CHANGELOG}")

  run-quality-suite:
    name: Run Quality Suite
    needs:
      - setup
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.push_tag.outputs.new_tag }}
      changelog: ${{ steps.changelog.outputs.CHANGELOG }}
    steps:
      - name: Get GitHub App Installation Token for Private Go Repos
        id: get_token
        uses: machine-learning-apps/actions-app-token@0.21
        with:
          APP_PEM: ${{ secrets.GO_PRIVATE_REPO_APP_KEY }}
          APP_ID: ${{ secrets.GO_PRIVATE_REPO_APP_ID }}

      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      # TODO: remove when Go 1.18 has been released.
      - name: Setup Go environment
        uses: actions/setup-go@v2.1.4
        with:
          go-version: '1.18.0-rc1'
          stable: false

      - name: Cache Dependencies
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: go-${{ hashFiles('**/go.sum') }}
          restore-keys: go-

      - name: Configure git for private modules
        env:
          TOKEN: ${{ steps.get_token.outputs.app_token }}
        run: git config --global url."https://x-access-token:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Run build
        run: |
          make all

      - name: Run integration-tests
        run: |
          make integration

      - name: SonarQube Analysis
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  create-release:
    name: Create Release
    needs:
      - setup
      - run-quality-suite
    runs-on: ubuntu-latest
    outputs:
      release-url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ needs.setup.outputs.version }}"
          release_name: ${{ github.event.repository.name }} ${{ needs.setup.outputs.version }}
          body: |
            ${{ needs.setup.outputs.changelog }}
          draft: false
          prerelease: false

  compile:
    name: Compile Binaries and Upload to Release
    needs:
      - setup
      - create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ darwin, windows, linux ]
        arch: [ amd64, arm64 ]
        include:
          - os: windows
            arch: amd64
            ext: .exe
        exclude:
          - os: windows
            arch: arm64
    steps:
      - name: Get GitHub App Installation Token for Private Go Repos
        id: get_token
        uses: machine-learning-apps/actions-app-token@0.21
        with:
          APP_PEM: ${{ secrets.GO_PRIVATE_REPO_APP_KEY }}
          APP_ID: ${{ secrets.GO_PRIVATE_REPO_APP_ID }}

      - name: Checkout Code
        uses: actions/checkout@v2

      # TODO: remove when Go 1.18 has been released.
      - name: Setup Go environment
        uses: actions/setup-go@v2.1.4
        with:
          go-version: '1.18.0-rc1'
          stable: false

      - name: Cache Dependencies
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: go-${{ hashFiles('**/go.sum') }}
          restore-keys: go-

      - name: Configure git for private modules
        env:
          TOKEN: ${{ steps.get_token.outputs.app_token }}
        run: git config --global url."https://x-access-token:${TOKEN}@github.com".insteadOf "https://github.com"


      - name: Build CLI
        env:
          VERSION: ${{ needs.setup.outputs.version }}
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CLI_EXT: ${{ matrix.ext }}
        run: make build

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release-url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./build/dist/${{ matrix.os }}_${{ matrix.arch }}/armory${{ matrix.ext }}
          asset_name: armory-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}
          asset_content_type: binary/octet-stream

  update-aurora-plugin:
    name: Trigger Aurora Build
    needs:
      - setup
      - create-release
      - compile
    runs-on: ubuntu-latest
    steps:
      - name: trigger a new aurora plugin build
        run: |
          curl -v -XPOST -u "${{ secrets.USERNAME }}:${{ secrets.TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/armory-io/spinnaker-deployments-plugin/dispatches --data "{\"event_type\": \"onCliRelease\", \"client_payload\": {\"org\": \"armory-io\", \"repo\": \"spinnaker-deployments-plugin\", \"releaseOrg\": \"armory-io\", \"releaseRepo\": \"spinnaker-deployments-plugin\", \"cli-release-version\": \"${{ needs.setup.outputs.version }}\"}}"

  build-push:
    name: Build and Push Docker Image
    needs:
      - setup
      - create-release
      - compile
    runs-on: ubuntu-latest
    outputs:
      docker-version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Get GitHub App Installation Token for Private Go Repos
        id: get_token
        uses: machine-learning-apps/actions-app-token@0.21
        with:
          APP_PEM: ${{ secrets.GO_PRIVATE_REPO_APP_KEY }}
          APP_ID: ${{ secrets.GO_PRIVATE_REPO_APP_ID }}

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Go environment
        uses: actions/setup-go@v2.1.4
        with:
          go-version: '1.18.1'
          stable: false

      - name: Cache Dependencies
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: go-${{ hashFiles('**/go.sum') }}
          restore-keys: go-

      - name: Configure git for private modules
        env:
          TOKEN: ${{ steps.get_token.outputs.app_token }}
        run: git config --global url."https://x-access-token:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Build CLI
        env:
          VERSION: ${{ needs.setup.outputs.version }}
        run: make build

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: armory/armory-cli
          tags: |
            type=semver,pattern={{version}},value=${{ needs.setup.outputs.version }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASS }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_PATH=./build/dist/linux_amd64/armory
  scan-image:
    name: CVE Image Scan
    needs:
      - build-push
      - setup
    runs-on: ubuntu-latest
    steps:
      - name: Run Security Scan
        uses: armory-io/aquasec-scan-action@v0.0.8
        with:
          url: https://aquasec.armory.io
          registry: Docker Hub
          username: ${{ secrets.AQUA_USER }}
          password: ${{ secrets.AQUA_PASSWORD }}
          image: armory/armory-cli:${{needs.build-push.outputs.docker-version}}

